import { bignum } from "@metaplex-foundation/beet";
import { VaultTransactionMessage } from "./generated";
import { AccountMeta, AddressLookupTableAccount, Connection, PublicKey, TransactionMessage, VersionedTransaction } from "@solana/web3.js";
export declare function toUtfBytes(str: string): Uint8Array;
export declare function toU8Bytes(num: number): Uint8Array;
export declare function toU32Bytes(num: number): Uint8Array;
export declare function toU64Bytes(num: bigint): Uint8Array;
export declare function toBigInt(number: bignum): bigint;
export declare function getAvailableMemoSize(txWithoutMemo: VersionedTransaction): number;
export declare function isStaticWritableIndex(message: VaultTransactionMessage, index: number): boolean;
export declare function isSignerIndex(message: VaultTransactionMessage, index: number): boolean;
/** We use custom serialization for `transaction_message` that ensures as small byte size as possible. */
export declare function transactionMessageToMultisigTransactionMessageBytes({ message, addressLookupTableAccounts, vaultPda, }: {
    message: TransactionMessage;
    addressLookupTableAccounts?: AddressLookupTableAccount[];
    vaultPda: PublicKey;
}): Uint8Array;
/** Populate remaining accounts required for execution of the transaction. */
export declare function accountsForTransactionExecute({ connection, transactionPda, vaultPda, message, ephemeralSignerBumps, }: {
    connection: Connection;
    message: VaultTransactionMessage;
    ephemeralSignerBumps: number[];
    vaultPda: PublicKey;
    transactionPda: PublicKey;
}): Promise<{
    /** Account metas used in the `message`. */
    accountMetas: AccountMeta[];
    /** Address lookup table accounts used in the `message`. */
    lookupTableAccounts: AddressLookupTableAccount[];
}>;

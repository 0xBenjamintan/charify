/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import { Member } from './Member';
import { Period } from './Period';
/**
 * This type is used to derive the {@link ConfigAction} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ConfigAction} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ConfigActionRecord = {
    AddMember: {
        newMember: Member;
    };
    RemoveMember: {
        oldMember: web3.PublicKey;
    };
    ChangeThreshold: {
        newThreshold: number;
    };
    SetTimeLock: {
        newTimeLock: number;
    };
    AddSpendingLimit: {
        createKey: web3.PublicKey;
        vaultIndex: number;
        mint: web3.PublicKey;
        amount: beet.bignum;
        period: Period;
        members: web3.PublicKey[];
        destinations: web3.PublicKey[];
    };
    RemoveSpendingLimit: {
        spendingLimit: web3.PublicKey;
    };
};
/**
 * Union type respresenting the ConfigAction data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isConfigAction*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ConfigAction = beet.DataEnumKeyAsKind<ConfigActionRecord>;
export declare const isConfigActionAddMember: (x: ConfigAction) => x is {
    __kind: "AddMember";
} & Omit<{
    newMember: Member;
}, "void"> & {
    __kind: 'AddMember';
};
export declare const isConfigActionRemoveMember: (x: ConfigAction) => x is {
    __kind: "RemoveMember";
} & Omit<{
    oldMember: web3.PublicKey;
}, "void"> & {
    __kind: 'RemoveMember';
};
export declare const isConfigActionChangeThreshold: (x: ConfigAction) => x is {
    __kind: "ChangeThreshold";
} & Omit<{
    newThreshold: number;
}, "void"> & {
    __kind: 'ChangeThreshold';
};
export declare const isConfigActionSetTimeLock: (x: ConfigAction) => x is {
    __kind: "SetTimeLock";
} & Omit<{
    newTimeLock: number;
}, "void"> & {
    __kind: 'SetTimeLock';
};
export declare const isConfigActionAddSpendingLimit: (x: ConfigAction) => x is {
    __kind: "AddSpendingLimit";
} & Omit<{
    createKey: web3.PublicKey;
    vaultIndex: number;
    mint: web3.PublicKey;
    amount: beet.bignum;
    period: Period;
    members: web3.PublicKey[];
    destinations: web3.PublicKey[];
}, "void"> & {
    __kind: 'AddSpendingLimit';
};
export declare const isConfigActionRemoveSpendingLimit: (x: ConfigAction) => x is {
    __kind: "RemoveSpendingLimit";
} & Omit<{
    spendingLimit: web3.PublicKey;
}, "void"> & {
    __kind: 'RemoveSpendingLimit';
};
/**
 * @category userTypes
 * @category generated
 */
export declare const configActionBeet: beet.FixableBeet<ConfigAction, ConfigAction>;

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
/**
 * This type is used to derive the {@link ProposalStatus} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ProposalStatus} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ProposalStatusRecord = {
    Draft: {
        timestamp: beet.bignum;
    };
    Active: {
        timestamp: beet.bignum;
    };
    Rejected: {
        timestamp: beet.bignum;
    };
    Approved: {
        timestamp: beet.bignum;
    };
    Executing: void;
    Executed: {
        timestamp: beet.bignum;
    };
    Cancelled: {
        timestamp: beet.bignum;
    };
};
/**
 * Union type respresenting the ProposalStatus data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isProposalStatus*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ProposalStatus = beet.DataEnumKeyAsKind<ProposalStatusRecord>;
export declare const isProposalStatusDraft: (x: ProposalStatus) => x is {
    __kind: "Draft";
} & Omit<{
    timestamp: beet.bignum;
}, "void"> & {
    __kind: 'Draft';
};
export declare const isProposalStatusActive: (x: ProposalStatus) => x is {
    __kind: "Active";
} & Omit<{
    timestamp: beet.bignum;
}, "void"> & {
    __kind: 'Active';
};
export declare const isProposalStatusRejected: (x: ProposalStatus) => x is {
    __kind: "Rejected";
} & Omit<{
    timestamp: beet.bignum;
}, "void"> & {
    __kind: 'Rejected';
};
export declare const isProposalStatusApproved: (x: ProposalStatus) => x is {
    __kind: "Approved";
} & Omit<{
    timestamp: beet.bignum;
}, "void"> & {
    __kind: 'Approved';
};
export declare const isProposalStatusExecuting: (x: ProposalStatus) => x is {
    __kind: "Executing";
} & Omit<void, "void"> & {
    __kind: 'Executing';
};
export declare const isProposalStatusExecuted: (x: ProposalStatus) => x is {
    __kind: "Executed";
} & Omit<{
    timestamp: beet.bignum;
}, "void"> & {
    __kind: 'Executed';
};
export declare const isProposalStatusCancelled: (x: ProposalStatus) => x is {
    __kind: "Cancelled";
} & Omit<{
    timestamp: beet.bignum;
}, "void"> & {
    __kind: 'Cancelled';
};
/**
 * @category userTypes
 * @category generated
 */
export declare const proposalStatusBeet: beet.FixableBeet<ProposalStatus, ProposalStatus>;

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { configActionBeet } from '../types/ConfigAction';
export const configTransactionDiscriminator = [94, 8, 4, 35, 113, 139, 139, 112];
/**
 * Holds the data for the {@link ConfigTransaction} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ConfigTransaction {
    multisig;
    creator;
    index;
    bump;
    actions;
    constructor(multisig, creator, index, bump, actions) {
        this.multisig = multisig;
        this.creator = creator;
        this.index = index;
        this.bump = bump;
        this.actions = actions;
    }
    /**
     * Creates a {@link ConfigTransaction} instance from the provided args.
     */
    static fromArgs(args) {
        return new ConfigTransaction(args.multisig, args.creator, args.index, args.bump, args.actions);
    }
    /**
     * Deserializes the {@link ConfigTransaction} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return ConfigTransaction.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link ConfigTransaction} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find ConfigTransaction account at ${address}`);
        }
        return ConfigTransaction.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf')) {
        return beetSolana.GpaBuilder.fromStruct(programId, configTransactionBeet);
    }
    /**
     * Deserializes the {@link ConfigTransaction} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return configTransactionBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link ConfigTransaction} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return configTransactionBeet.serialize({
            accountDiscriminator: configTransactionDiscriminator,
            ...this,
        });
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link ConfigTransaction} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = ConfigTransaction.fromArgs(args);
        return configTransactionBeet.toFixedFromValue({
            accountDiscriminator: configTransactionDiscriminator,
            ...instance,
        }).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link ConfigTransaction} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(args, connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(ConfigTransaction.byteSize(args), commitment);
    }
    /**
     * Returns a readable version of {@link ConfigTransaction} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            multisig: this.multisig.toBase58(),
            creator: this.creator.toBase58(),
            index: (() => {
                const x = this.index;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            bump: this.bump,
            actions: this.actions,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const configTransactionBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['multisig', beetSolana.publicKey],
    ['creator', beetSolana.publicKey],
    ['index', beet.u64],
    ['bump', beet.u8],
    ['actions', beet.array(configActionBeet)],
], ConfigTransaction.fromArgs, 'ConfigTransaction');

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { memberBeet } from '../types/Member';
export const multisigDiscriminator = [224, 116, 121, 186, 68, 161, 79, 236];
/**
 * Holds the data for the {@link Multisig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Multisig {
    createKey;
    configAuthority;
    threshold;
    timeLock;
    transactionIndex;
    staleTransactionIndex;
    reserved;
    bump;
    members;
    constructor(createKey, configAuthority, threshold, timeLock, transactionIndex, staleTransactionIndex, reserved, bump, members) {
        this.createKey = createKey;
        this.configAuthority = configAuthority;
        this.threshold = threshold;
        this.timeLock = timeLock;
        this.transactionIndex = transactionIndex;
        this.staleTransactionIndex = staleTransactionIndex;
        this.reserved = reserved;
        this.bump = bump;
        this.members = members;
    }
    /**
     * Creates a {@link Multisig} instance from the provided args.
     */
    static fromArgs(args) {
        return new Multisig(args.createKey, args.configAuthority, args.threshold, args.timeLock, args.transactionIndex, args.staleTransactionIndex, args.reserved, args.bump, args.members);
    }
    /**
     * Deserializes the {@link Multisig} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return Multisig.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Multisig} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find Multisig account at ${address}`);
        }
        return Multisig.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf')) {
        return beetSolana.GpaBuilder.fromStruct(programId, multisigBeet);
    }
    /**
     * Deserializes the {@link Multisig} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return multisigBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link Multisig} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return multisigBeet.serialize({
            accountDiscriminator: multisigDiscriminator,
            ...this,
        });
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Multisig} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = Multisig.fromArgs(args);
        return multisigBeet.toFixedFromValue({
            accountDiscriminator: multisigDiscriminator,
            ...instance,
        }).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Multisig} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(args, connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(Multisig.byteSize(args), commitment);
    }
    /**
     * Returns a readable version of {@link Multisig} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            createKey: this.createKey.toBase58(),
            configAuthority: this.configAuthority.toBase58(),
            threshold: this.threshold,
            timeLock: this.timeLock,
            transactionIndex: (() => {
                const x = this.transactionIndex;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            staleTransactionIndex: (() => {
                const x = this.staleTransactionIndex;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            reserved: this.reserved,
            bump: this.bump,
            members: this.members,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const multisigBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['createKey', beetSolana.publicKey],
    ['configAuthority', beetSolana.publicKey],
    ['threshold', beet.u16],
    ['timeLock', beet.u32],
    ['transactionIndex', beet.u64],
    ['staleTransactionIndex', beet.u64],
    ['reserved', beet.u8],
    ['bump', beet.u8],
    ['members', beet.array(memberBeet)],
], Multisig.fromArgs, 'Multisig');

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * DuplicateMember: 'Found multiple members with the same pubkey'
 *
 * @category Errors
 * @category generated
 */
export class DuplicateMemberError extends Error {
    code = 0x1770;
    name = 'DuplicateMember';
    constructor() {
        super('Found multiple members with the same pubkey');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DuplicateMemberError);
        }
    }
}
createErrorFromCodeLookup.set(0x1770, () => new DuplicateMemberError());
createErrorFromNameLookup.set('DuplicateMember', () => new DuplicateMemberError());
/**
 * EmptyMembers: 'Members array is empty'
 *
 * @category Errors
 * @category generated
 */
export class EmptyMembersError extends Error {
    code = 0x1771;
    name = 'EmptyMembers';
    constructor() {
        super('Members array is empty');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, EmptyMembersError);
        }
    }
}
createErrorFromCodeLookup.set(0x1771, () => new EmptyMembersError());
createErrorFromNameLookup.set('EmptyMembers', () => new EmptyMembersError());
/**
 * TooManyMembers: 'Too many members, can be up to 65535'
 *
 * @category Errors
 * @category generated
 */
export class TooManyMembersError extends Error {
    code = 0x1772;
    name = 'TooManyMembers';
    constructor() {
        super('Too many members, can be up to 65535');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TooManyMembersError);
        }
    }
}
createErrorFromCodeLookup.set(0x1772, () => new TooManyMembersError());
createErrorFromNameLookup.set('TooManyMembers', () => new TooManyMembersError());
/**
 * InvalidThreshold: 'Invalid threshold, must be between 1 and number of members with Vote permission'
 *
 * @category Errors
 * @category generated
 */
export class InvalidThresholdError extends Error {
    code = 0x1773;
    name = 'InvalidThreshold';
    constructor() {
        super('Invalid threshold, must be between 1 and number of members with Vote permission');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidThresholdError);
        }
    }
}
createErrorFromCodeLookup.set(0x1773, () => new InvalidThresholdError());
createErrorFromNameLookup.set('InvalidThreshold', () => new InvalidThresholdError());
/**
 * Unauthorized: 'Attempted to perform an unauthorized action'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
    code = 0x1774;
    name = 'Unauthorized';
    constructor() {
        super('Attempted to perform an unauthorized action');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnauthorizedError);
        }
    }
}
createErrorFromCodeLookup.set(0x1774, () => new UnauthorizedError());
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError());
/**
 * NotAMember: 'Provided pubkey is not a member of multisig'
 *
 * @category Errors
 * @category generated
 */
export class NotAMemberError extends Error {
    code = 0x1775;
    name = 'NotAMember';
    constructor() {
        super('Provided pubkey is not a member of multisig');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotAMemberError);
        }
    }
}
createErrorFromCodeLookup.set(0x1775, () => new NotAMemberError());
createErrorFromNameLookup.set('NotAMember', () => new NotAMemberError());
/**
 * InvalidTransactionMessage: 'TransactionMessage is malformed.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTransactionMessageError extends Error {
    code = 0x1776;
    name = 'InvalidTransactionMessage';
    constructor() {
        super('TransactionMessage is malformed.');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTransactionMessageError);
        }
    }
}
createErrorFromCodeLookup.set(0x1776, () => new InvalidTransactionMessageError());
createErrorFromNameLookup.set('InvalidTransactionMessage', () => new InvalidTransactionMessageError());
/**
 * StaleProposal: 'Proposal is stale'
 *
 * @category Errors
 * @category generated
 */
export class StaleProposalError extends Error {
    code = 0x1777;
    name = 'StaleProposal';
    constructor() {
        super('Proposal is stale');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, StaleProposalError);
        }
    }
}
createErrorFromCodeLookup.set(0x1777, () => new StaleProposalError());
createErrorFromNameLookup.set('StaleProposal', () => new StaleProposalError());
/**
 * InvalidProposalStatus: 'Invalid proposal status'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalStatusError extends Error {
    code = 0x1778;
    name = 'InvalidProposalStatus';
    constructor() {
        super('Invalid proposal status');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidProposalStatusError);
        }
    }
}
createErrorFromCodeLookup.set(0x1778, () => new InvalidProposalStatusError());
createErrorFromNameLookup.set('InvalidProposalStatus', () => new InvalidProposalStatusError());
/**
 * InvalidTransactionIndex: 'Invalid transaction index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTransactionIndexError extends Error {
    code = 0x1779;
    name = 'InvalidTransactionIndex';
    constructor() {
        super('Invalid transaction index');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTransactionIndexError);
        }
    }
}
createErrorFromCodeLookup.set(0x1779, () => new InvalidTransactionIndexError());
createErrorFromNameLookup.set('InvalidTransactionIndex', () => new InvalidTransactionIndexError());
/**
 * AlreadyApproved: 'Member already approved the transaction'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyApprovedError extends Error {
    code = 0x177a;
    name = 'AlreadyApproved';
    constructor() {
        super('Member already approved the transaction');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AlreadyApprovedError);
        }
    }
}
createErrorFromCodeLookup.set(0x177a, () => new AlreadyApprovedError());
createErrorFromNameLookup.set('AlreadyApproved', () => new AlreadyApprovedError());
/**
 * AlreadyRejected: 'Member already rejected the transaction'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyRejectedError extends Error {
    code = 0x177b;
    name = 'AlreadyRejected';
    constructor() {
        super('Member already rejected the transaction');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AlreadyRejectedError);
        }
    }
}
createErrorFromCodeLookup.set(0x177b, () => new AlreadyRejectedError());
createErrorFromNameLookup.set('AlreadyRejected', () => new AlreadyRejectedError());
/**
 * AlreadyCancelled: 'Member already cancelled the transaction'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyCancelledError extends Error {
    code = 0x177c;
    name = 'AlreadyCancelled';
    constructor() {
        super('Member already cancelled the transaction');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AlreadyCancelledError);
        }
    }
}
createErrorFromCodeLookup.set(0x177c, () => new AlreadyCancelledError());
createErrorFromNameLookup.set('AlreadyCancelled', () => new AlreadyCancelledError());
/**
 * InvalidNumberOfAccounts: 'Wrong number of accounts provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidNumberOfAccountsError extends Error {
    code = 0x177d;
    name = 'InvalidNumberOfAccounts';
    constructor() {
        super('Wrong number of accounts provided');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidNumberOfAccountsError);
        }
    }
}
createErrorFromCodeLookup.set(0x177d, () => new InvalidNumberOfAccountsError());
createErrorFromNameLookup.set('InvalidNumberOfAccounts', () => new InvalidNumberOfAccountsError());
/**
 * InvalidAccount: 'Invalid account provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountError extends Error {
    code = 0x177e;
    name = 'InvalidAccount';
    constructor() {
        super('Invalid account provided');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x177e, () => new InvalidAccountError());
createErrorFromNameLookup.set('InvalidAccount', () => new InvalidAccountError());
/**
 * RemoveLastMember: 'Cannot remove last member'
 *
 * @category Errors
 * @category generated
 */
export class RemoveLastMemberError extends Error {
    code = 0x177f;
    name = 'RemoveLastMember';
    constructor() {
        super('Cannot remove last member');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, RemoveLastMemberError);
        }
    }
}
createErrorFromCodeLookup.set(0x177f, () => new RemoveLastMemberError());
createErrorFromNameLookup.set('RemoveLastMember', () => new RemoveLastMemberError());
/**
 * NoVoters: 'Members don't include any voters'
 *
 * @category Errors
 * @category generated
 */
export class NoVotersError extends Error {
    code = 0x1780;
    name = 'NoVoters';
    constructor() {
        super("Members don't include any voters");
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NoVotersError);
        }
    }
}
createErrorFromCodeLookup.set(0x1780, () => new NoVotersError());
createErrorFromNameLookup.set('NoVoters', () => new NoVotersError());
/**
 * NoProposers: 'Members don't include any proposers'
 *
 * @category Errors
 * @category generated
 */
export class NoProposersError extends Error {
    code = 0x1781;
    name = 'NoProposers';
    constructor() {
        super("Members don't include any proposers");
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NoProposersError);
        }
    }
}
createErrorFromCodeLookup.set(0x1781, () => new NoProposersError());
createErrorFromNameLookup.set('NoProposers', () => new NoProposersError());
/**
 * NoExecutors: 'Members don't include any executors'
 *
 * @category Errors
 * @category generated
 */
export class NoExecutorsError extends Error {
    code = 0x1782;
    name = 'NoExecutors';
    constructor() {
        super("Members don't include any executors");
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NoExecutorsError);
        }
    }
}
createErrorFromCodeLookup.set(0x1782, () => new NoExecutorsError());
createErrorFromNameLookup.set('NoExecutors', () => new NoExecutorsError());
/**
 * InvalidStaleTransactionIndex: '`stale_transaction_index` must be <= `transaction_index`'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStaleTransactionIndexError extends Error {
    code = 0x1783;
    name = 'InvalidStaleTransactionIndex';
    constructor() {
        super('`stale_transaction_index` must be <= `transaction_index`');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidStaleTransactionIndexError);
        }
    }
}
createErrorFromCodeLookup.set(0x1783, () => new InvalidStaleTransactionIndexError());
createErrorFromNameLookup.set('InvalidStaleTransactionIndex', () => new InvalidStaleTransactionIndexError());
/**
 * NotSupportedForControlled: 'Instruction not supported for controlled multisig'
 *
 * @category Errors
 * @category generated
 */
export class NotSupportedForControlledError extends Error {
    code = 0x1784;
    name = 'NotSupportedForControlled';
    constructor() {
        super('Instruction not supported for controlled multisig');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotSupportedForControlledError);
        }
    }
}
createErrorFromCodeLookup.set(0x1784, () => new NotSupportedForControlledError());
createErrorFromNameLookup.set('NotSupportedForControlled', () => new NotSupportedForControlledError());
/**
 * TimeLockNotReleased: 'Proposal time lock has not been released'
 *
 * @category Errors
 * @category generated
 */
export class TimeLockNotReleasedError extends Error {
    code = 0x1785;
    name = 'TimeLockNotReleased';
    constructor() {
        super('Proposal time lock has not been released');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TimeLockNotReleasedError);
        }
    }
}
createErrorFromCodeLookup.set(0x1785, () => new TimeLockNotReleasedError());
createErrorFromNameLookup.set('TimeLockNotReleased', () => new TimeLockNotReleasedError());
/**
 * NoActions: 'Config transaction must have at least one action'
 *
 * @category Errors
 * @category generated
 */
export class NoActionsError extends Error {
    code = 0x1786;
    name = 'NoActions';
    constructor() {
        super('Config transaction must have at least one action');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NoActionsError);
        }
    }
}
createErrorFromCodeLookup.set(0x1786, () => new NoActionsError());
createErrorFromNameLookup.set('NoActions', () => new NoActionsError());
/**
 * MissingAccount: 'Missing account'
 *
 * @category Errors
 * @category generated
 */
export class MissingAccountError extends Error {
    code = 0x1787;
    name = 'MissingAccount';
    constructor() {
        super('Missing account');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MissingAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x1787, () => new MissingAccountError());
createErrorFromNameLookup.set('MissingAccount', () => new MissingAccountError());
/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
    code = 0x1788;
    name = 'InvalidMint';
    constructor() {
        super('Invalid mint');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintError);
        }
    }
}
createErrorFromCodeLookup.set(0x1788, () => new InvalidMintError());
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError());
/**
 * InvalidDestination: 'Invalid destination'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDestinationError extends Error {
    code = 0x1789;
    name = 'InvalidDestination';
    constructor() {
        super('Invalid destination');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidDestinationError);
        }
    }
}
createErrorFromCodeLookup.set(0x1789, () => new InvalidDestinationError());
createErrorFromNameLookup.set('InvalidDestination', () => new InvalidDestinationError());
/**
 * SpendingLimitExceeded: 'Spending limit exceeded'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitExceededError extends Error {
    code = 0x178a;
    name = 'SpendingLimitExceeded';
    constructor() {
        super('Spending limit exceeded');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, SpendingLimitExceededError);
        }
    }
}
createErrorFromCodeLookup.set(0x178a, () => new SpendingLimitExceededError());
createErrorFromNameLookup.set('SpendingLimitExceeded', () => new SpendingLimitExceededError());
/**
 * DecimalsMismatch: 'Decimals don't match the mint'
 *
 * @category Errors
 * @category generated
 */
export class DecimalsMismatchError extends Error {
    code = 0x178b;
    name = 'DecimalsMismatch';
    constructor() {
        super("Decimals don't match the mint");
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DecimalsMismatchError);
        }
    }
}
createErrorFromCodeLookup.set(0x178b, () => new DecimalsMismatchError());
createErrorFromNameLookup.set('DecimalsMismatch', () => new DecimalsMismatchError());
/**
 * UnknownPermission: 'Member has unknown permission'
 *
 * @category Errors
 * @category generated
 */
export class UnknownPermissionError extends Error {
    code = 0x178c;
    name = 'UnknownPermission';
    constructor() {
        super('Member has unknown permission');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnknownPermissionError);
        }
    }
}
createErrorFromCodeLookup.set(0x178c, () => new UnknownPermissionError());
createErrorFromNameLookup.set('UnknownPermission', () => new UnknownPermissionError());
/**
 * ProtectedAccount: 'Account is protected, it cannot be passed into a CPI as writable'
 *
 * @category Errors
 * @category generated
 */
export class ProtectedAccountError extends Error {
    code = 0x178d;
    name = 'ProtectedAccount';
    constructor() {
        super('Account is protected, it cannot be passed into a CPI as writable');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProtectedAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x178d, () => new ProtectedAccountError());
createErrorFromNameLookup.set('ProtectedAccount', () => new ProtectedAccountError());
/**
 * TimeLockExceedsMaxAllowed: 'Time lock exceeds the maximum allowed (90 days)'
 *
 * @category Errors
 * @category generated
 */
export class TimeLockExceedsMaxAllowedError extends Error {
    code = 0x178e;
    name = 'TimeLockExceedsMaxAllowed';
    constructor() {
        super('Time lock exceeds the maximum allowed (90 days)');
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TimeLockExceedsMaxAllowedError);
        }
    }
}
createErrorFromCodeLookup.set(0x178e, () => new TimeLockExceedsMaxAllowedError());
createErrorFromNameLookup.set('TimeLockExceedsMaxAllowed', () => new TimeLockExceedsMaxAllowedError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}

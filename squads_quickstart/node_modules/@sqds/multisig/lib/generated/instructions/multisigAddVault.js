/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { multisigAddVaultArgsBeet, } from '../types/MultisigAddVaultArgs';
/**
 * @category Instructions
 * @category MultisigAddVault
 * @category generated
 */
export const multisigAddVaultStruct = new beet.FixableBeetArgsStruct([
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', multisigAddVaultArgsBeet],
], 'MultisigAddVaultInstructionArgs');
export const multisigAddVaultInstructionDiscriminator = [
    47, 74, 24, 170, 12, 229, 89, 49,
];
/**
 * Creates a _MultisigAddVault_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category MultisigAddVault
 * @category generated
 */
export function createMultisigAddVaultInstruction(accounts, args, programId = new web3.PublicKey('SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf')) {
    const [data] = multisigAddVaultStruct.serialize({
        instructionDiscriminator: multisigAddVaultInstructionDiscriminator,
        ...args,
    });
    const keys = [
        {
            pubkey: accounts.multisig,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.configAuthority,
            isWritable: false,
            isSigner: true,
        },
    ];
    if (accounts.rentPayer != null) {
        keys.push({
            pubkey: accounts.rentPayer,
            isWritable: true,
            isSigner: true,
        });
    }
    if (accounts.systemProgram != null) {
        if (accounts.rentPayer == null) {
            throw new Error("When providing 'systemProgram' then 'accounts.rentPayer' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.systemProgram,
            isWritable: false,
            isSigner: false,
        });
    }
    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}

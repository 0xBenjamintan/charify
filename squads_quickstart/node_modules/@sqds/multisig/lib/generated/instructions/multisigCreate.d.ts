/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { MultisigCreateArgs } from '../types/MultisigCreateArgs';
/**
 * @category Instructions
 * @category MultisigCreate
 * @category generated
 */
export type MultisigCreateInstructionArgs = {
    args: MultisigCreateArgs;
};
/**
 * @category Instructions
 * @category MultisigCreate
 * @category generated
 */
export declare const multisigCreateStruct: beet.FixableBeetArgsStruct<MultisigCreateInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _multisigCreate_ instruction
 *
 * @property [_writable_] multisig
 * @property [**signer**] createKey
 * @property [_writable_, **signer**] creator
 * @category Instructions
 * @category MultisigCreate
 * @category generated
 */
export type MultisigCreateInstructionAccounts = {
    multisig: web3.PublicKey;
    createKey: web3.PublicKey;
    creator: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const multisigCreateInstructionDiscriminator: number[];
/**
 * Creates a _MultisigCreate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category MultisigCreate
 * @category generated
 */
export declare function createMultisigCreateInstruction(accounts: MultisigCreateInstructionAccounts, args: MultisigCreateInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;

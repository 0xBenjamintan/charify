/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { VaultTransactionCreateArgs } from '../types/VaultTransactionCreateArgs';
/**
 * @category Instructions
 * @category VaultTransactionCreate
 * @category generated
 */
export type VaultTransactionCreateInstructionArgs = {
    args: VaultTransactionCreateArgs;
};
/**
 * @category Instructions
 * @category VaultTransactionCreate
 * @category generated
 */
export declare const vaultTransactionCreateStruct: beet.FixableBeetArgsStruct<VaultTransactionCreateInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _vaultTransactionCreate_ instruction
 *
 * @property [_writable_] multisig
 * @property [_writable_] transaction
 * @property [**signer**] creator
 * @property [_writable_, **signer**] rentPayer
 * @category Instructions
 * @category VaultTransactionCreate
 * @category generated
 */
export type VaultTransactionCreateInstructionAccounts = {
    multisig: web3.PublicKey;
    transaction: web3.PublicKey;
    creator: web3.PublicKey;
    rentPayer: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const vaultTransactionCreateInstructionDiscriminator: number[];
/**
 * Creates a _VaultTransactionCreate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VaultTransactionCreate
 * @category generated
 */
export declare function createVaultTransactionCreateInstruction(accounts: VaultTransactionCreateInstructionAccounts, args: VaultTransactionCreateInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;

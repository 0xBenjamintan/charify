/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category BatchExecuteTransaction
 * @category generated
 */
export declare const batchExecuteTransactionStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _batchExecuteTransaction_ instruction
 *
 * @property [] multisig
 * @property [**signer**] member
 * @property [_writable_] proposal
 * @property [_writable_] batch
 * @property [] transaction
 * @category Instructions
 * @category BatchExecuteTransaction
 * @category generated
 */
export type BatchExecuteTransactionInstructionAccounts = {
    multisig: web3.PublicKey;
    member: web3.PublicKey;
    proposal: web3.PublicKey;
    batch: web3.PublicKey;
    transaction: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const batchExecuteTransactionInstructionDiscriminator: number[];
/**
 * Creates a _BatchExecuteTransaction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category BatchExecuteTransaction
 * @category generated
 */
export declare function createBatchExecuteTransactionInstruction(accounts: BatchExecuteTransactionInstructionAccounts, programId?: web3.PublicKey): web3.TransactionInstruction;

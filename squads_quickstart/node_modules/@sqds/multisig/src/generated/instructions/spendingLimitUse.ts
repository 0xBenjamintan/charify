/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SpendingLimitUseArgs,
  spendingLimitUseArgsBeet,
} from '../types/SpendingLimitUseArgs'

/**
 * @category Instructions
 * @category SpendingLimitUse
 * @category generated
 */
export type SpendingLimitUseInstructionArgs = {
  args: SpendingLimitUseArgs
}
/**
 * @category Instructions
 * @category SpendingLimitUse
 * @category generated
 */
export const spendingLimitUseStruct = new beet.FixableBeetArgsStruct<
  SpendingLimitUseInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', spendingLimitUseArgsBeet],
  ],
  'SpendingLimitUseInstructionArgs'
)
/**
 * Accounts required by the _spendingLimitUse_ instruction
 *
 * @property [_writable_] multisig
 * @property [**signer**] member
 * @property [_writable_] spendingLimit
 * @property [_writable_] vault
 * @property [_writable_] destination
 * @property [] mint (optional)
 * @property [_writable_] vaultTokenAccount (optional)
 * @property [_writable_] destinationTokenAccount (optional)
 * @category Instructions
 * @category SpendingLimitUse
 * @category generated
 */
export type SpendingLimitUseInstructionAccounts = {
  multisig: web3.PublicKey
  member: web3.PublicKey
  spendingLimit: web3.PublicKey
  vault: web3.PublicKey
  destination: web3.PublicKey
  systemProgram?: web3.PublicKey
  mint?: web3.PublicKey
  vaultTokenAccount?: web3.PublicKey
  destinationTokenAccount?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const spendingLimitUseInstructionDiscriminator = [
  16, 57, 130, 127, 193, 20, 155, 134,
]

/**
 * Creates a _SpendingLimitUse_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SpendingLimitUse
 * @category generated
 */
export function createSpendingLimitUseInstruction(
  accounts: SpendingLimitUseInstructionAccounts,
  args: SpendingLimitUseInstructionArgs,
  programId = new web3.PublicKey('SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf')
) {
  const [data] = spendingLimitUseStruct.serialize({
    instructionDiscriminator: spendingLimitUseInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.multisig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.member,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.spendingLimit,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.systemProgram != null) {
    keys.push({
      pubkey: accounts.systemProgram,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.mint != null) {
    if (accounts.systemProgram == null) {
      throw new Error(
        "When providing 'mint' then 'accounts.systemProgram' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.vaultTokenAccount != null) {
    if (accounts.systemProgram == null || accounts.mint == null) {
      throw new Error(
        "When providing 'vaultTokenAccount' then 'accounts.systemProgram', 'accounts.mint' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.vaultTokenAccount,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.destinationTokenAccount != null) {
    if (
      accounts.systemProgram == null ||
      accounts.mint == null ||
      accounts.vaultTokenAccount == null
    ) {
      throw new Error(
        "When providing 'destinationTokenAccount' then 'accounts.systemProgram', 'accounts.mint', 'accounts.vaultTokenAccount' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.destinationTokenAccount,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.tokenProgram != null) {
    if (
      accounts.systemProgram == null ||
      accounts.mint == null ||
      accounts.vaultTokenAccount == null ||
      accounts.destinationTokenAccount == null
    ) {
      throw new Error(
        "When providing 'tokenProgram' then 'accounts.systemProgram', 'accounts.mint', 'accounts.vaultTokenAccount', 'accounts.destinationTokenAccount' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.tokenProgram,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
